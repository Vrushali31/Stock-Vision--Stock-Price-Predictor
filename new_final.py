# -*- coding: utf-8 -*-
"""New_final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OLf-uoROdd9H8iOeRKoGdUsGouUzNFuk
"""

import numpy as np
import matplotlib.pyplot as plt
# plt.style.use('fivethirtyeight')
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM, Dropout, GRU, Bidirectional
from keras.optimizers import SGD
import math
from sklearn.metrics import mean_squared_error
import time
import datetime
import pandas as pd
import tensorflow as tf
from tensorflow import keras
from sklearn.preprocessing import LabelEncoder
from keras.callbacks import EarlyStopping

model = tf.keras.models.load_model('final_model_h5.h5')

# Daily fetch and add row to database
import time
from datetime import date
from datetime import datetime
import pandas as pd

ticker1='TSLA'
ticker2='BAC'
ticker3='AAPL'
ticker4='MDB'
ticker5='UBER'



currentDay = datetime.now().day
currentMonth = datetime.now().month
currentYear = datetime.now().year

prevDay=currentDay
prevMonth=currentMonth
prevYear = currentYear

prevDay = prevDay-1
if(prevDay<1):
  if(currentMonth==3):
    prevDay=28
    prevMonth=2
  elif(currentMonth % 2 ==0):
    prevDay=31
    prevMonth-=1
  else:
    prevDay=31
    prevMonth-=1

  if(prevMonth<1):
    prevMonth=12
    prevYear-=1
print("year ",prevYear, " Month: ", prevMonth, " Day: ", prevDay)


period1 = int(time.mktime(datetime(prevYear, prevMonth, prevDay, 23, 59).timetuple())) # year,month,date, hour, min
period2 = int(time.mktime(datetime(currentYear, currentMonth, currentDay, 23, 59).timetuple()))
interval = '1d'


query_string1 = f'https://query1.finance.yahoo.com/v7/finance/download/{ticker1}?period1={period1}&period2={period2}&interval={interval}&events=history&includeAdjustedClose=true'
query_string2 = f'https://query1.finance.yahoo.com/v7/finance/download/{ticker2}?period1={period1}&period2={period2}&interval={interval}&events=history&includeAdjustedClose=true'
query_string3 = f'https://query1.finance.yahoo.com/v7/finance/download/{ticker3}?period1={period1}&period2={period2}&interval={interval}&events=history&includeAdjustedClose=true'
query_string4 = f'https://query1.finance.yahoo.com/v7/finance/download/{ticker4}?period1={period1}&period2={period2}&interval={interval}&events=history&includeAdjustedClose=true'
query_string5 = f'https://query1.finance.yahoo.com/v7/finance/download/{ticker5}?period1={period1}&period2={period2}&interval={interval}&events=history&includeAdjustedClose=true'


df1 = pd.read_csv(query_string1)
df1.insert(loc=5,
          column='Company',
          value=ticker1)

df2 = pd.read_csv(query_string2)
df2.insert(loc=5,
          column='Company',
          value=ticker2)

df3 = pd.read_csv(query_string3)
df3.insert(loc=5,
          column='Company',
          value=ticker3)

df4 = pd.read_csv(query_string4)
df4.insert(loc=5,
          column='Company',
          value=ticker4)

df5 = pd.read_csv(query_string5)
df5.insert(loc=5,
          column='Company',
          value=ticker5)


dataset = pd.read_csv('/dataset_new.csv')

frames = [df1, df2, df3, df4, df5]
  
result_df = pd.concat(frames)

le = LabelEncoder()
result_df['Company'] = le.fit_transform(result_df['Company'])

frames = [dataset, result_df]
  
result_df = pd.concat(frames)


print(result_df)
result_df.to_csv('dataset_new.csv')

#to train model daily
import schedule
import time

def daily_run():
  currentDay = datetime.now().day
  currentMonth = datetime.now().month
  currentYear = datetime.now().year

  sequence_length = 50
  prevDay=currentDay
  prevMonth=currentMonth
  prevYear = currentYear
  upper_limit = 2*sequence_length

  for i in range(1,upper_limit):
    prevDay = prevDay-1
    if(prevDay<1):
      if(currentMonth==3):
        prevDay=28
        prevMonth=2
      elif(currentMonth % 2 ==0):
        prevDay=31
        prevMonth-=1
      else:
        prevDay=31
        prevMonth-=1

      if(prevMonth<1):
        prevMonth=12
        prevYear-=1
    # print("year ",prevYear, " Month: ", prevMonth, " Day: ", prevDay)


  # print(prevMonth)

  ticker1='TSLA'
  period1 = int(time.mktime(datetime(prevYear, prevMonth, prevDay, 1, 30).timetuple())) # year,month,date, hour, min
  period2 = int(time.mktime(datetime(currentYear, currentMonth, currentDay, 23, 59).timetuple()))
  interval = '1d'
  query_string1 = f'https://query1.finance.yahoo.com/v7/finance/download/{ticker1}?period1={period1}&period2={period2}&interval={interval}&events=history&includeAdjustedClose=true'
  df1 = pd.read_csv(query_string1)

  # print(df1)
  df1.insert(loc=5,
            column='Company',
            value=3)
  df1.to_csv('temp_dataset.csv')

  dataset=pd.read_csv('temp_dataset.csv',  index_col='Date', parse_dates=['Date'])
  dataset.pop(dataset.columns[0])
  Filtered_Features = ['Close', 'Company']

  data_filtered=dataset[Filtered_Features]
  print(data_filtered)
  nrows = data_filtered.shape[0]
  # print(nrows)
  data_filtered_ext = data_filtered.copy()
  data_filtered_ext['Prediction'] = data_filtered_ext['Close']
  # print(data_filtered_ext)

  # Convert the data to numpy values
  np_data_unscaled = np.array(data_filtered)
  np_data = np.reshape(np_data_unscaled, (nrows, -1))

  scaler = MinMaxScaler()
  np_data_scaled = scaler.fit_transform(np_data_unscaled)

  # print(np_data.shape)

  scaler_pred = MinMaxScaler()
  df_Close = pd.DataFrame(data_filtered_ext['Close'])
  np_Close_scaled = scaler_pred.fit_transform(df_Close)
  # print(dataset)

  index_Close = data_filtered.columns.get_loc("Close")

  # scaler = MinMaxScaler()
  # np_data_scaled = scaler.fit_transform(np_data_unscaled)
  # print(np_data_scaled)

  # data_len = dataset.shape[0]
  # print(dataset[data_len:data_len,:])


  train_data_len = math.ceil(np_data_scaled.shape[0])
  train_data = np_data_scaled[0:train_data_len, :]
  def partition_dataset(sequence_length, data):
      x, y = [], []
      data_len = data_filtered.shape[0]
      # for i in range(sequence_length, data_len):
      x.append(data_filtered.iloc[data_len-sequence_length:data_len,:]) #contains sequence_length values 0-sequence_length * columsn
      y.append(data_filtered.iloc[0, index_Close]) #contains the prediction values for validation,  for single-step prediction
      
      # Convert the x and y to numpy arrays
      x = np.array(x)
      y = np.array(y)
      return x, y

  x_train, y_train = partition_dataset(sequence_length, train_data)
  # train_data = np_data_scaled[upper_limit-sequence_length:upper_limit,:]
  # y_train = dataset[upper_limit-1,index_Close]

  print(x_train.shape, y_train.shape)

  model.fit(x_train, y_train)

schedule.every().day.at("23:21").do(daily_run)
# schedule.every(10).seconds.do(daily_run)

while 1:
  schedule.run_pending()
  time.sleep(1)